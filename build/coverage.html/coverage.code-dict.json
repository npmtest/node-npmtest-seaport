{"/home/travis/build/npmtest/node-npmtest-seaport/test.js":"/* istanbul instrument in package npmtest_seaport */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-seaport/lib.npmtest_seaport.js":"/* istanbul instrument in package npmtest_seaport */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_seaport = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_seaport = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-seaport/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-seaport && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_seaport */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_seaport\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_seaport.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_seaport.rollup.js'] =\n            local.assetsDict['/assets.npmtest_seaport.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_seaport.__dirname + '/lib.npmtest_seaport.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-seaport/node_modules/seaport/index.js":"var net = require('net');\nvar seaport = require('./lib/seaport');\nvar version = require('./package.json').version;\nvar nodeVersion = process.version.replace(/^v/,'').replace(/\\.[^.]+$/, '');\n\nexports = module.exports = function () {\n    return seaport.apply(this, arguments);\n};\n\nObject.keys(seaport).forEach(function (key) {\n    exports[key] = seaport[key];\n});\n\nexports.connect = function () {\n    var args = [].slice.call(arguments);\n    var opts = {};\n    for (var i = 0; i < args.length; i++) {\n        if (typeof args[i] === 'object') {\n            opts = args[i];\n            args.splice(i, 1);\n            break;\n        }\n    }\n    var port = args[0] || opts.port;\n    var host = args[1] || opts.host;\n    \n    if (typeof port === 'string' && typeof host === 'number') {\n        host = args[0];\n        port = args[1];\n    }\n    if (typeof port === 'string' && /:\\d+$/.test(port)) {\n        host = port.split(':')[0];\n        port = port.split(':')[1];\n    }\n    if (typeof port === 'string' && /^\\d+$/.test(port)) {\n        port = Number(port);\n    }\n    \n    var s = seaport(opts);\n    var conIx = 0;\n    \n    var c = (function reconnect () {\n        if (s.closed) return;\n        \n        var hubs = [ { port : port, host : host } ].concat(s.query('seaport'));\n        if (hubs.length <= conIx) conIx = hubs.length - 1;\n        c = net.connect.call(null, hubs[conIx].port, hubs[conIx].host);\n        conIx = (conIx + 1) % hubs.length;\n        \n        var active = true;\n        \n        c.on('connect', s.emit.bind(s, 'connect'));\n        \n        c.on('end', onend);\n        c.on('error', onend);\n        c.on('close', onend);\n        \n        var stream = s.createStream();\n        stream.on('timeout', onend);\n        \n        c.pipe(stream).pipe(c);\n        return c;\n        \n        function onend () {\n            if (s.closed) return;\n            if (!active) return;\n            active = false;\n            if (stream.destroy) stream.destroy();\n            s.emit('disconnect');\n            setTimeout(reconnect, 1000);\n        }\n    })();\n    \n    s.on('close', function () {\n        if (c) c.end();\n        if (nodeVersion !== '0.8') {\n            if (c.destroy) c.destroy();\n        }\n    });\n    \n    return s;\n};\n\nexports.createServer = function (opts) {\n    if (!opts) opts = {};\n    opts.isServer = true;\n    var s = seaport(opts);\n    \n    s.server = net.createServer(function (c) {\n        c.on('error', function (error) {\n            c.emit('end');\n        });\n        c.pipe(s.createStream(c.remoteAddress)).pipe(c);\n    });\n    s.listen = s.server.listen.bind(s.server);\n    s.address = s.server.address.bind(s.server);\n    \n    s.peer = function () {\n        if (!s.address()) {\n            var args = arguments;\n            s.once('listening', function () {\n                s.peer.apply(s, args);\n            });\n            return;\n        }\n        var stream = s.createStream();\n        var c = exports.connect.apply(this, arguments);\n        s.on('close', c.close.bind(c));\n        stream.pipe(c.createStream()).pipe(stream);\n        \n        c.register({\n            role : 'seaport@' + version,\n            port : s.address().port\n        });\n    };\n    \n    s.on('close', function () {\n        s.server.close();\n    });\n\n    s.server.on('listening', s.emit.bind(s, 'listening'));\n    s.server.on('connection', s.emit.bind(s, 'connection'));\n    \n    return s;\n};\n","/home/travis/build/npmtest/node-npmtest-seaport/node_modules/seaport/lib/seaport.js":"var inherits = require('inherits');\nvar EventEmitter = require('events').EventEmitter;\nvar indexOf = require('indexof');\nvar objectKeys = require('object-keys');\nvar semver = require('semver');\nvar defined = require('defined');\nvar secure = require('secure-peer');\nvar merge = require('merge');\n\nvar generateId = require('./id.js');\nvar Protocol = require('./protocol.js');\n\nmodule.exports = Seaport;\ninherits(Seaport, EventEmitter);\n\nfunction Seaport (opts) {\n    var self = this;\n    if (!(this instanceof Seaport)) return new Seaport(opts);\n    if (!opts) opts = {};\n    this.endpoints = [];\n    this.services = {};\n    this.heartbeat = defined(opts.heartbeat, 15 * 1000);\n    this.timeout = defined(opts.timeout, this.heartbeat * 3);\n    this.known = {};\n    this.doc = this; // for legacy .doc.set() syntax, deprecated\n    \n    if (opts.private) {\n        var keys = { private: opts.private, public: opts.public };\n        this.secure = secure(keys);\n        if (opts.authorized) {\n            this.authorized = opts.authorized.map(normalizeKey);\n        }\n    }\n}\n\n// each stream creates a new endpoint\nSeaport.prototype.createStream = function (addr) {\n    var self = this;\n    var p = new Protocol({\n        heartbeat: this.heartbeat,\n        timeout: this.timeout,\n    });\n    this.endpoints.push(p);\n    \n    p.on('end', onend);\n    p.on('register', function onregister (id, meta) {\n        // prevents loops when peers connect from both sides\n        if (self.known[id] && self.query(meta).length) return;\n\n        if (!meta.host) meta.host = self._host;\n        \n        if (self.services[id]) {\n            self.services[id] = meta;\n        }\n        else {\n            self.known[id] = meta;\n        }\n        \n        for (var i = 0; i < self.endpoints.length; i++) {\n            var e = self.endpoints[i];\n            if (e === p) continue;\n            e.send([ 'register', id, meta ]);\n        }\n        self.emit('register', meta, id);\n    });\n    p.on('timeout', function () {\n        onend();\n        stream.emit('timeout');\n    });\n    p.on('free', function (id) {\n        var obj = self.known[id] ? self.known : self.services;\n        var meta = obj[id];\n        if (!meta) return;\n\n        for (var i = 0; i < self.endpoints.length; i++) {\n            var e = self.endpoints[i];\n            e.send(['free', id]);\n        }\n\n        delete obj[id];\n        self.emit('free', meta, id);\n    });\n    p.on('synced', function () {\n        stream.emit('synced');\n        self.emit('synced', stream);\n    });\n    \n    if (!addr && !self._host) {\n        p.on('helo', function (addr) {\n            self._host = addr;\n            self.emit('address', addr);\n        });\n    }\n    \n    this.emit('endpoint', p);\n    var stream;\n    if (this.secure) {\n        stream = this.secure(function (s) {\n            s.pipe(p.createStream()).pipe(s);\n        });\n        stream.on('identify', function (id) {\n            if (self._isAuthorized(id.key.public)) {\n                id.accept();\n                self.emit('accept', id);\n            }\n            else {\n                id.reject();\n                self.emit('reject', id);\n            }\n        });\n    }\n    else {\n        stream = p.createStream();\n    }\n    stream.on('error', onend);\n    stream.on('close', onend);\n    p.once('close', function () {\n        p.destroy();\n        var keys = objectKeys(p.known);\n        for (var i = 0; i < keys.length; i++) {\n            var key = keys[i];\n            var meta = self.known[key];\n            if (!meta) continue;\n            delete self.known[key];\n            self.emit('free', meta, key);\n        }\n    });\n    \n    if (addr) p.send([ 'helo', addr ]);\n    \n    registerServices(merge(this.known, this.services), p);\n    self.emit('stream', stream);\n    self.emit('protocol', p);\n    return stream;\n    \n    function onend () {\n        if (p._ended) return;\n        p._ended = true;\n        p.destroy();\n        \n        var ix = indexOf(self.endpoints, p);\n        self.endpoints.splice(ix, 1);\n        var keys = objectKeys(p.known);\n        for (var i = 0; i < keys.length; i++) {\n            var key = keys[i];\n            var meta = self.known[key];\n            if (!meta) continue;\n\n            delete self.known[key];\n            \n            for (var j = 0; j < self.endpoints.length; j++) {\n                var e = self.endpoints[j];\n                if (e === p) continue;\n                e.send([ 'free', key ]);\n            }\n            \n            self.emit('free', meta, key);\n        }\n    }\n};\n\nSeaport.prototype.register = function () {\n    return this.registerMeta.apply(this, arguments).port;\n};\n\nSeaport.prototype.registerMeta = function (meta, port) {\n    var self = this;\n    meta = fixMeta(meta, port);\n    \n    if (!meta.port) {\n        meta.port = 10000 + Math.floor(Math.random() * 55000);\n    }\n    var id = meta.id || generateId();\n    meta.id = id;\n    this.services[id] = meta;\n    \n    if (!meta.host && this._host) {\n        meta.host = this._host;\n        register();\n    }\n    else if (!meta.host) {\n        this.once('address', function (addr) {\n            meta.host = addr;\n            register();\n        });\n    }\n    else register()\n    \n    return meta;\n    \n    function register () {\n        var mserv = {};\n        mserv[id] = meta;\n        for (var i = 0; i < self.endpoints.length; i++) {\n            registerServices(mserv, self.endpoints[i]);\n        }\n    }\n};\n\nSeaport.prototype.free = function (meta) {\n    var id;\n    if (typeof meta === 'number') {\n        meta = { port: meta };\n    }\n    if (typeof meta === 'object') {\n        var keys = objectKeys(this.services).concat(objectKeys(this.known));\n        var mkeys = objectKeys(meta);\n        for (var i = 0; i < keys.length; i++) {\n            var s = this.services[keys[i]] || this.known[keys[i]];\n            for (var j = 0; j < mkeys.length; j++) {\n                if (meta[mkeys[j]] !== s[mkeys[j]]) break;\n            }\n            if (j === mkeys.length) {\n                id = keys[i];\n                meta = this.services[id];\n                break;\n            }\n        }\n        if (i === keys.length) return;\n    }\n    else {\n        id = meta;\n        meta = this.services[id] || this.known[id];\n    }\n\n    if (this.services[id]) {\n        meta = this.services[id];\n        delete this.services[id];\n    } else if (this.known[id]) {\n        meta = this.known[id];\n        delete this.known[id];\n    } else {\n        return;\n    }\n    \n    for (var i = 0; i < this.endpoints.length; i++) {\n        var e = this.endpoints[i];\n        e.send([ 'free', id ]);\n    }\n    this.emit('free', meta, id);\n};\n\nSeaport.prototype.close = function () {\n    this.closed = true;\n    for (var i = 0; i < this.endpoints.length; i++) {\n        var e = this.endpoints[i];\n        e.emit('close');\n        e.end();\n    }\n    this.emit('close');\n};\n\nSeaport.prototype.get = function get (meta, cb) {\n    var self = this;\n    var ps = this.query(meta);\n    if (ps.length > 0) return cb(ps);\n    this.once('register', function () { self.get(meta, cb) });\n};\n\nSeaport.prototype.set = function (id, meta) {\n    var records = this.services[id] ? this.services : this.known;\n    if (!records[id]) return;\n    \n    records[id] = meta;\n    if (this.services[id]) return;\n    \n    for (var i = 0; i < this.endpoints.length; i++) {\n        var e = this.endpoints[i];\n        e.send([ 'register', id, meta ]);\n    }\n};\n\nSeaport.prototype.query = function (meta) {\n    meta = fixMeta(meta);\n    var mkeys = objectKeys(meta);\n    var skeys = objectKeys(this.services);\n    var keys = objectKeys(this.known);\n    \n    var rows = [];\n    for (var i = 0; i < keys.length; i++) {\n        var key = keys[i];\n        var row = this.known[key];\n        if (matches(row)) rows.push(row);\n    }\n    for (var i = 0; i < skeys.length; i++) {\n        var key = skeys[i];\n        var row = this.services[key];\n        if (matches(row)) rows.push(row);\n    }\n    return rows;\n    \n    function matches (row) {\n        for (var i = 0; i < mkeys.length; i++) {\n            var mkey = mkeys[i];\n            if (mkey === 'version') {\n                if (!semver.satisfies(row.version, meta.version)) {\n                    return false;\n                }\n            }\n            else if (row[mkey] !== meta[mkey]) return false;\n        }\n        return true;\n    }\n};\n\nSeaport.prototype._isAuthorized = function (id) {\n    if (!this.authorized) return true;\n    return indexOf(this.authorized, normalizeKey(id)) >= 0;\n};\n\nfunction registerServices (services, p) {\n    var keys = objectKeys(services);\n    for (var i = 0; i < keys.length; i++) {\n        var key = keys[i];\n        p.send([ 'register', key, services[key] ]);\n    }\n    p.send([ 'synced' ]);\n}\n\nfunction fixMeta (meta, port) {\n    if (!meta) return {};\n    if (typeof meta === 'string') {\n        if (typeof port === 'object') {\n            port.role = meta;\n            meta = port;\n        }\n        else meta = { role: meta };\n    }\n    if (typeof port === 'number') {\n        meta.port = port;\n    }\n    if (/@/.test(meta.role)) {\n        meta.version = meta.role.split('@')[1];\n        meta.role = meta.role.split('@')[0];\n    }\n    return meta;\n}\n\nfunction normalizeKey (id) {\n    return (typeof id === 'string' ? id : String(id))\n        .replace(/^-----BEGIN \\w+ \\w+ KEY-----\\s*/, '')\n        .replace(/^-----END \\w+ \\w+ KEY-----\\s*/, '')\n        .replace(/\\s+/g, '')\n    ;\n}\n","/home/travis/build/npmtest/node-npmtest-seaport/node_modules/seaport/lib/id.js":"module.exports = function () {\n    // same as require('scuttlebutt/util').createId()\n    \n    return [1,1,1].map(function () {\n        return Math.random().toString(16).substring(2).toUpperCase();\n    }).join('');\n};\n","/home/travis/build/npmtest/node-npmtest-seaport/node_modules/seaport/lib/protocol.js":"var inherits = require('inherits');\nvar Duplex = require('readable-stream').Duplex;\nvar split = require('split');\nvar through = require('through');\nvar combine = require('stream-combiner');\nvar json = typeof JSON !== 'undefined' ? JSON : require('jsonify');\n\nmodule.exports = Protocol;\ninherits(Protocol, Duplex);\n\nfunction Protocol (opts) {\n    var self = this;\n    if (!(self instanceof Protocol)) return new Protocol(opts);\n    Duplex.call(self, { objectMode: true });\n    if (!opts) opts = {};\n    \n    self.known = {};\n    self.timing = {\n        heartbeat: opts.heartbeat,\n        timeout: opts.timeout\n    };\n    \n    if (self.timing.heartbeat) {\n        self.heartbeatInterval = setInterval(function () {\n            self.send([ 'heartbeat' ]);\n        }, self.timing.heartbeat);\n    }\n}\n\nProtocol.prototype.send = function (row) {\n    this.push(row);\n};\n\nProtocol.prototype.destroy = function () {\n    clearInterval(this.heartbeatInterval);\n    clearTimeout(this.timeout);\n};\n\nProtocol.prototype._write = function (row, enc, next) {\n    var self = this;\n    if (row[0] === 'register') {\n        this.known[row[1]] = row[2];\n        this.emit('register', row[1], row[2]);\n    }\n    else if (row[0] === 'free') {\n        var meta = this.known[row[1]];\n        delete this.known[row[1]];\n        this.emit('free', row[1], meta);\n    }\n    else if (row[0] === 'helo') {\n        this.emit('helo', row[1]);\n    }\n    else if (row[0] === 'heartbeat') {\n        this.emit('heartbeat');\n        if (this.timing.timeout) {\n            clearTimeout(this.timeout);\n            this.timeout = setTimeout(function () {\n                self.emit('timeout');\n            }, this.timing.timeout);\n        }\n    }\n    else if (row[0] === 'synced') {\n        this.emit('synced');\n    }\n    next();\n};\n\nProtocol.prototype._read = function (size) {};\n\nProtocol.prototype.createStream = function () {\n    var unsplit = through(function (row) {\n        this.queue(json.stringify(row) + '\\n');\n    });\n    return combine(split(json.parse), this, unsplit);\n};\n","/home/travis/build/npmtest/node-npmtest-seaport/node_modules/seaport/bin/cmd.js":"#!/usr/bin/env node\nvar seaport = require('../');\nvar spawn = require('child_process').spawn;\nvar fs = require('fs');\n\nvar argv = require('optimist').argv;\nvar cmd = argv._[0];\n\nif (argv.version) {\n    return console.log(require('../package.json').version);\n}\n\nif (!cmd || argv.h || argv.help) {\n    return fs.createReadStream(__dirname + '/usage.txt')\n        .pipe(process.stdout)\n    ;\n}\n\nif (cmd === 'listen') {\n    var port = argv.port || argv._[1];\n    var opts = argv._.slice(1)\n        .filter(function (x) { return !/^\\d+$/.test(x) })\n        .map(function (x) {\n            return JSON.parse(fs.readFileSync(x, 'utf8'));\n        })\n        .reduce(function (acc, data) {\n            if (Array.isArray(data)) {\n                acc.authorized.push(data);\n            }\n            else {\n                if (data.public) acc.public = data.public;\n                if (data.private) acc.private = data.private;\n            }\n            return acc;\n        }, { authorized : [] })\n    ;\n    \n    var server = seaport.createServer(argv, opts);\n    server.listen(port);\n    console.log('seaport listening on :' + port);\n    return;\n}\n\nif (cmd === 'query' || cmd === 'show') {\n    var ports = seaport.connect(argv._[1]);\n    ports.once('synced', function () {\n        var ps = ports.query(argv._[2]);\n        ps = ps.map(function (p) {\n            for (var i = 3; i < argv._.length; i++) {\n                p = p[argv._[i]];\n                if (!p) break;\n            }\n            return p;\n        });\n        console.log(JSON.stringify(ps, null, 2));\n        ports.close();\n    });\n    return;\n}\n\nif (cmd === 'watch') {\n    var ports = seaport.connect(argv._[1]);\n    ports.services.on('changes', function (row, ch) {\n        var parts = [\n            row.state.role + '@' + row.state.version,\n            row.state.host + ':' + row.state.port,\n            '[' + row.state.id + ']'\n        ].join(' ');\n        \n        var keys = ch && Object.keys(ch);\n        if (ch.type === null) {\n            console.log('FREE ' + parts);\n        }\n        else if (keys.length === 1 && ch.type === 'service') {\n            console.log('RECLAIM ' + parts);\n        }\n        else if (keys.length === 1 && ch.type === 'stale-service') {\n            console.log('STALE ' + parts);\n        }\n        else if (keys.length === 1 && ch._heartbeat) {\n            if (argv.vvv) console.log('HEARTBEAT ' + parts);\n        }\n        else {\n            console.log('REGISTER ' + parts);\n        }\n        \n        if (argv.v || argv.verbose) {\n            console.log(JSON.stringify(row, null, 2)\n                .split('\\n')\n                .map(function (line) { return '  ' + line })\n                .join('\\n')\n            );\n        }\n    });\n}\n\nif (cmd === 'register') {\n    var ports = seaport.connect(argv._[1]);\n    var opts = JSON.parse(argv.meta || '{}');\n    opts.role = argv._[2];\n    \n    if (argv.key) opts.key = JSON.parse(fs.readFileSync(argv.key, 'utf8'));\n    \n    var port = ports.register(opts);\n    \n    (function respawn () {\n        var ps = spawn(argv._[3], argv._.slice(4).concat(port));\n        ps.stdout.pipe(process.stdout, { end : false });\n        ps.stderr.pipe(process.stderr, { end : false });\n        \n        ps.on('exit', function () {\n            setTimeout(respawn, 1000);\n        });\n    })();\n}\n"}